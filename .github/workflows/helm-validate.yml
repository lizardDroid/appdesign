name: Helm Lint and Validate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    env:
      RELEASE_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Normalize release name
        run: |
          echo "RELEASE_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Helm lint (base)
        run: |
          helm lint deployments/httpbin

      - name: "Helm lint (env: dev overrides)"
        run: |
          if [ -f environments/dev/values.yaml ]; then
            helm lint deployments/httpbin -f environments/dev/values.yaml
          fi

      - name: Render manifests (Rollout)
        run: |
          helm template "$RELEASE_NAME" deployments/httpbin \
            --namespace default \
            > rendered-rollout.yaml

      - name: Render manifests (Deployment fallback)
        run: |
          helm template "$RELEASE_NAME" deployments/httpbin \
            --namespace default \
            --set useDeploymentFallback=true \
            > rendered-deployment.yaml

      - name: Render manifests (Dev overrides)
        run: |
          if [ -f environments/dev/values.yaml ]; then
            helm template "$RELEASE_NAME" deployments/httpbin \
              --namespace default \
              -f environments/dev/values.yaml \
              > rendered-dev.yaml
          fi

      - name: Install kubeconform
        run: |
          curl -sSL -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz kubeconform
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Validate manifests with kubeconform
        run: |
          set -euo pipefail
          for f in rendered-rollout.yaml rendered-deployment.yaml rendered-dev.yaml; do
            [ -f "$f" ] || continue
            echo "Validating $f"
            kubeconform -strict -summary -kubernetes-version 1.28.0 -ignore-missing-schemas "$f"
          done

      - name: Install kube-linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/stackrox/kube-linter/main/install.sh | sh -s -- -b /usr/local/bin
          kube-linter version

      - name: Kube-linter (chart)
        run: |
          set -euo pipefail
          FILES=""
          for f in rendered-rollout.yaml rendered-deployment.yaml rendered-dev.yaml; do
            [ -f "$f" ] && FILES="$FILES $f"
          done
          if [ -n "$FILES" ]; then
            kube-linter lint --color never $FILES
          else
            echo "No rendered files present for kube-linter; skipping."
          fi


