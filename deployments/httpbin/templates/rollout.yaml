{{- if and .Values.rollout.enabled (not .Values.useDeploymentFallback) }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ include "httpbin.fullname" . }}
  labels:
    {{- include "httpbin.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "httpbin.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    canary:
      canaryService: {{ .Values.rollout.canaryServiceName }}
      stableService: {{ .Values.rollout.stableServiceName }}
      trafficRouting:
        {{- if and .Values.rollout.trafficRouting.nginx.enabled .Values.ingress.enabled }}
        nginx:
          stableIngress: {{ .Values.rollout.trafficRouting.nginx.stableIngress | quote }}
        {{- end }}
      steps:
        {{- toYaml .Values.rollout.steps | nindent 8 }}
  {{- if .Values.rollout.analysis.enabled }}
  analysis:
    templates:
      {{- toYaml .Values.rollout.analysis.templates | nindent 6 }}
    args:
      {{- toYaml .Values.rollout.analysis.args | nindent 6 }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "httpbin.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "httpbin.fullname" .) }}
      automountServiceAccountToken: false
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpread.enabled }}
      topologySpreadConstraints:
        - maxSkew: {{ .Values.topologySpread.maxSkew }}
          topologyKey: "{{ .Values.topologySpread.topologyKey }}"
          whenUnsatisfiable: "{{ .Values.topologySpread.whenUnsatisfiable }}"
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: {{ include "httpbin.name" . }}
              app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
      {{- if ne .Values.podAntiAffinity "off" }}
      affinity:
        podAntiAffinity:
          {{- if eq .Values.podAntiAffinity "required" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values: [{{ include "httpbin.name" . }}]
                  - key: app.kubernetes.io/instance
                    operator: In
                    values: [{{ .Release.Name }}]
              topologyKey: kubernetes.io/hostname
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: [{{ include "httpbin.name" . }}]
                    - key: app.kubernetes.io/instance
                      operator: In
                      values: [{{ .Release.Name }}]
                topologyKey: kubernetes.io/hostname
          {{- end }}
      {{- end }}
      containers:
        - name: {{ include "httpbin.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}{{ if .Values.image.digest }}@{{ .Values.image.digest }}{{ end }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.tmpDir.enabled }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          {{- end }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readiness.path }}
              port: http
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.liveness.path }}
              port: http
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
          {{- if .Values.startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startup.path }}
              port: http
            failureThreshold: {{ .Values.startup.failureThreshold }}
            periodSeconds: {{ .Values.startup.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.tmpDir.enabled }}
      volumes:
        - name: tmp
          emptyDir:
            {{- if .Values.tmpDir.medium }}
            medium: {{ .Values.tmpDir.medium | quote }}
            {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
